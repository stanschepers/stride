language: cpp
dist: xenial

env:
  global:
    secure: AF50YrtPAbiWK7E7EgQ6RwRGoEj3pF/ToOWAk+lLupqEgwM6qyWXrIZx12OY4hAA2RljDl2q+btPpSkHKlP2SYko5/yWmvkXB9sY+6K+AHotn/y7oNJj0/jqaz6NV6gOpfIgcDJEdl7Zjyj9jJiSbmTJPAf0gNJR0Zljw2l27F2YeCwrEXp1Zl/7f6WKhhcSdD60p8548U+XhM8d+8Sbw1lVscIhgen+HMSkjqFoSiqDRkOiQUczu4sapfQqJV6LRcq6dw+nFRRE/Rhg1K+eO6tDqk0pdc5/9TYrpa80pV55MAdBMIPB/4/7XCIe0P3059+bEEpsMpm+f2pTmjKlmDEHwhKji3tX3vDF2QbnWV/FjOrFRmzO9x20jOY+6Nhn15rza5cP9gLVbm+5a6rEZd9UgzI9q1DLwJmbglGdX4ht0pMjJTKn+BY6woZ6R1ipJXryd+VSrRCyaJ8vCl9XSWKIjI9f3QowNMu4ySo3KZI4OtJxfsNCGy7pb47bL5wpOaSBApobuqEZ1vYVm5mHGqX+dp2dveIQC9ykPvGOs7DaVTSS+5oZK21qocq+w15HUR1P8fhB988+Pz9boMWAYX2OoztVxepoVVXATsL92bkZJhS2kVxaj/HX+8ka0+kItQ1ZcdSW50opwXxYqJm5N1EgRj7OG1AP7/RInBX/2Ag=

cache:
  directories:
    - $HOME/.ccache
    - $HOME/deps

addons:
  apt:
    update: true
    sources: &default_sources
      - ubuntu-toolchain-r-test
      - boost-latest
    packages: &default_packages
      # - libhdf5-dev
      - doxygen
      - graphviz

matrix:
  include:

    - os: linux
      compiler: gcc
      env: MATRIX_EVAL="CC=gcc-7 && CXX=g++-7 && CMAKE_BUILD_TYPE=Debug"
      addons: {apt: { packages: [*default_packages, g++-7], sources: [*default_sources]}}

    - os: linux
      compiler: gcc
      env: MATRIX_EVAL="CC=gcc-7 && CXX=g++-7 && MAKE_TEST=true"
      addons: {apt: { packages: [*default_packages, g++-7], sources: [*default_sources]}}

    - os: linux
      compiler: gcc
      env: MATRIX_EVAL="CC=gcc-8 && CXX=g++-8 && TRAVIS_BUILD_DOCS=true"
      addons: {apt: { packages: [*default_packages, g++-8], sources: [*default_sources]}}

    - os: linux
      compiler: clang
      env: MATRIX_EVAL="CC=clang && CXX=clang++ && MAKE_TEST=true"
      addons: {apt: { packages: [*default_packages], sources: [*default_sources]}}

    #- os: osx
    #  osx_image: xcode10.1
    #  compiler: clang
    #  env: MATRIX_EVAL="CXX_ID=clang6 && CC=clang && CXX=clang++"

    - os: osx
      osx_image: xcode10.1
      compiler: clang
      env: MATRIX_EVAL="CXX_ID=clang7 && CC=clang && CXX=clang++ && MAKE_TEST=true"

    - os: osx
      osx_image: xcode10.1
      compiler: gcc
      env: MATRIX_EVAL="CXX_ID=gcc && CC=gcc-8 && CXX=g++-8"

    - os: osx
      osx_image: xcode10.1
      compiler: clang
      env: MATRIX_EVAL="CXX_ID=apple && CC=cc && CXX=c++"

before_install:
  - eval "${MATRIX_EVAL}"
  # OpenMP issue with linux+clang
  #- export LD_LIBRARY_PATH=/usr/local/clang/lib:$LD_LIBRARY_PATH
  # Check commit matches expected commit (because of Travis bug)
  - |
    if [[ "$TRAVIS_COMMIT" != "$(git rev-parse HEAD)" ]]; then
      echo "Commit doesn't match expected $TRAVIS_COMMIT";
    fi
  - |
    if [[ "$TRAVIS_OS_NAME" == "osx" ]] && [[ "$CXX_ID" == "clang6" ]]; then
      brew install llvm@6 libomp
      # brew link --force --overwrite llvm@6
      export PATH="$(brew --prefix llvm@6)/bin:$PATH"
      ls
    fi
  - |
    if [[ "$TRAVIS_OS_NAME" == "osx" ]] && [[ "$CXX_ID" == "clang7" ]]; then
      brew install llvm@7 libomp
      # brew link --force --overwrite llvm@7
      export PATH="$(brew --prefix llvm@7)/bin:$PATH"
    fi
  - |
    if [[ "$TRAVIS_OS_NAME" == "osx" ]] && [[ "$CXX_ID" == "gcc" ]]; then
      brew install gcc@8
      export PATH="/usr/local/bin:$PATH"
    fi
  - |
    if [[ "$TRAVIS_OS_NAME" == "linux" ]] && [[ "$CC" == "clang" ]]; then
      export LD_LIBRARY_PATH="/usr/local/clang/lib:$LD_LIBRARY_PATH"
    fi

install:
    #--------- Linux
  - |
    if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      SWIGHOME=$HOME/deps/swig_3.0.12
      if [[ -z "$(ls -A $SWIGHOME)" ]]; then
        cd /tmp/;
        curl -s -J -O -k -L 'https://sourceforge.net/projects/swig/files/swig/swig-3.0.12/swig-3.0.12.tar.gz/download'
        tar xf swig-3.0.12.tar.gz > /dev/null 2>&1
        cd swig-3.0.12 && ./configure --prefix $SWIGHOME
        make && make install
        cd $TRAVIS_BUILD_DIR
      else
        echo "Already have swig cache"
      fi
      export CMAKE_PREFIX_PATH=$SWIGHOME:$CMAKE_PREFIX_PATH
    fi
    #--------- OSX
  - |
    if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      brew upgrade python cmake
      brew install ccache swig
    fi
    #--------- All platforms
  - |
    #           STRIDE_FORCE_NO_BOOST: do not use bjam to build boost (mac+gcc problems)
    #			STRIDE_BOOST_ROOT: specify where the correct version of boost can be found
    #			STRIDE_BOOST_NO_SYSTEM_PATHS: should be ON to prevent mixing different versions of boost
    if [[ "$TRAVIS_OS_NAME" == "osx" ]] && [[ "$CXX_ID" == "gcc" ]]; then
      export STRIDE_FORCE_NO_BOOST=ON
      export STRIDE_BOOST_NO_SYSTEM_PATHS=ON
    else
      export BOOST_ROOT=$HOME/deps/boost_1_69_0
      if [[ -z "$(ls -A $BOOST_ROOT)" ]]; then
        cd /tmp/
        wget https://dl.bintray.com/boostorg/release/1.69.0/source/boost_1_69_0.tar.gz -q
        tar xf boost_1_69_0.tar.gz > /dev/null 2>&1
        cd boost_1_69_0/
        ./bootstrap.sh --prefix=$BOOST_ROOT --with-libraries=chrono,date_time,filesystem,iostreams,locale,regex,system,thread
        ./b2 -q -a -j2 -d0 --disable-filesystem2 cxxflags="-v -std=c++11" threading=multi install
        cd $TRAVIS_BUILD_DIR;
      else
        echo "Already have boost cache"
      fi
      export LD_LIBRARY_PATH=$BOOST_ROOT/lib:$LD_LIBRARY_PATH
      sudo rm -f /usr/local/lib/libboost*.dylib*
      sudo ln -s $BOOST_ROOT/lib/*.{so,dylib}* /usr/local/lib
    fi

script:
  - make all && if [[ "$MAKE_TEST" = "true" ]]; then make test; fi

after_success:
    # Generate the docs only if master, the travis_build_docs is true and we can use secure variables
  - |
    if [[ "$TRAVIS_BRANCH" = "master" && "$TRAVIS_BUILD_DOCS" = "true" && "$TRAVIS_PULL_REQUEST" = "false" ]]; then
      cd $TRAVIS_BUILD_DIR
      chmod +x resources/sh/generate-doxygen.sh
      resources/sh/generate-doxygen.sh
    fi
